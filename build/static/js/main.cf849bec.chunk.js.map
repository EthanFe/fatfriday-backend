{"version":3,"sources":["utility.js","components/NewEventInput.js","components/VoteCount.js","components/Chatroom.js","components/EventDisplay.js","components/EventsList.js","components/LoginArea.js","components/MainView.js","components/SocketController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","today","date","Date","setHours","setMinutes","setSeconds","index","array","key","reduce","object","element","Object","group","Array","push","NewEventInput","react_default","a","createElement","type","placeholder","value","this","props","newEventName","onChange","newEventNameChanged","entry_default","newEventDateChanged","newEventDate","onClick","createNewEvent","Component","VoteCount","componentDidMount","_this","positiveAnimation","anime","targets","id","color","easing","direction","duration","background","negativeAnimation","componentDidUpdate","prevProps","votes","restart","className","Chatroom","messages","forEach","message","console","log","created_on","toLocaleTimeString","map","hour","minute","toLocaleString","users","user_id","name","message_body","viewingAsMember","currentlyTypingMessage","currentlyTypingMessageChanged","event","sendMessage","event_id","EventDisplay","dropDownStyle","borderRadius","boxShadow","padding","fontSize","position","overflow","maxHeight","z-index","doesNameContainInput","input","toLowerCase","indexOf","inviteAcceptedUsers","loggedInAs","undefined","find","invite","votedFor","place","viewingAsCreator","data","created_by","_this2","invitableUsersById","invitableUsers","invites","filter","accepted","invitePendingUsers","sortedPlaces","placeSuggestions","sort","place1","place2","length","usersExcludingSelf","user","usersWhoVotedForMousedOver","mousedOverSuggestion","vote","includes","removeEvent","event_date","eventOwned","Autocomplete_default","getItemValue","item","items","renderItem","isHighlighted","style","invitingUserText","invitingUserTextChanged","target","onSelect","inviteUser","shouldItemRender","menuStyle","acceptInvitation","placeName","placeSearchAutocompletes","placeSearchText","placeSearchTextChanged","suggestPlace","placeID","react_flip_move_es","entryClassName","concat","google_place_id","onMouseOver","placeMousedOver","onMouseOut","VoteCount_VoteCount","placeClickedOn","Chatroom_Chatroom","EventsList","invitesByEvent","placeSuggestionsByEvent","messagesByEvent","sortedEvents","events","event1","event2","getTime","EventDisplay_EventDisplay","mousedOverSuggestionIDs","suggestion","LoginArea","loginUsername","loginUsernameChanged","loginPassword","loginPasswordChanged","loginButtonPressed","newUsername","newUsernameChanged","newPassword","newPasswordChanged","createNewUser","logoutButtonPressed","MainView","LoginArea_LoginArea","NewEventInput_NewEventInput","EventsList_EventsList","SocketController","state","mousedOverSuggestionID","setupSocket","socket","require","on","setInitialData","updateEventList","updateInvitableUsersList","loginSuccess","updateInvitesList","setPlaceSearchAutocompletes","updatePlaceSuggestions","updateMessages","emit","token","setState","text","userID","eventID","invitee_user_id","_ref","preventDefault","username","password","_ref2","autoCompleteBuildupTimer","clearTimeout","setTimeout","places","place_id","place_name","alreadyVoted","setVoteTo","suggestionIDs","MainView_MainView","App","SocketController_SocketController","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf849bec.chunk.js","sourcesContent":["const today = () => {\n  const date = new Date()\n  date.setHours(0);\n  date.setMinutes(0);\n  date.setSeconds(0);\n  return date;\n}\n\nconst index = (array, key) => {\n  return array.reduce( (object, element) => {\n    object[element[key]] = element\n    return object\n    // eslint-disable-next-line\n  }, new Object)\n}\n\nconst group = (array, key) => {\n  return array.reduce( (object, element) => {\n    // eslint-disable-next-line\n    object[element[key]] = object[element[key]] || new Array\n    object[element[key]].push(element)\n    return object\n    // eslint-disable-next-line\n  }, new Object)\n}\n\nmodule.exports = {today, index, group}","import React, { Component } from 'react';\nimport DateTimePicker from 'react-datetime-picker';\n\nexport default class NewEventInput extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <input type=\"text\" placeholder=\"Event Name\" value={this.props.newEventName} onChange={this.props.newEventNameChanged}/>\n          <DateTimePicker onChange={this.props.newEventDateChanged} value={this.props.newEventDate}/>\n        </div>\n        <button onClick={this.props.createNewEvent}>Create New Event</button>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport anime from 'animejs'\n\nexport default class VoteCount extends Component {\n  componentDidMount = () => {\n    this.positiveAnimation = anime({\n      targets: '.vote-count.' + this.props.id,\n      color: \"#ffffff\",\n      easing: 'easeOutQuart',\n      direction: 'alternate',\n      duration: 350,\n      background: \"#00B258\"\n    });\n    this.negativeAnimation = anime({\n      targets: '.vote-count.' + this.props.id,\n      color: \"#ffffff\",\n      easing: 'easeOutQuart',\n      direction: 'alternate',\n      duration: 350,\n      background: \"#B30300\"\n    });\n  }\n  \n  componentDidUpdate = (prevProps) => {\n    if (prevProps.votes < this.props.votes) {\n      this.positiveAnimation.restart()\n    } else if (prevProps.votes > this.props.votes) {\n      this.negativeAnimation.restart()\n    }\n  }\n\n  render() {\n    return <div className={\"vote-count \" + this.props.id}>{this.props.votes}</div>\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Chatroom extends Component {\n  render() {\n    this.props.messages.forEach(message => {\n      console.log(new Date(message.created_on).toLocaleTimeString())\n    })\n    return (\n      <div className=\"event-display-messages\">\n        <div className=\"event-display-messages-header\">Chat</div>\n        <div className=\"event-display-messages-list\">\n          {this.props.messages.map(message =>\n            <div className=\"event-display-messages-message-container\">\n              <div className=\"event-display-messages-message-timestamp basic-timestamp\">{new Date(message.created_on).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>\n              <div className=\"event-display-messages-message-timestamp full-timestamp\">{new Date(message.created_on).toLocaleString()}</div>\n              <div className=\"event-display-messages-message\">\n                <div className=\"event-display-messages-message-username\">{this.props.users[message.user_id].name}: </div>\n                <div className=\"event-display-messages-message-text\">{message.message_body}</div>\n              </div>\n            </div>\n          )}\n        </div>\n        {this.props.viewingAsMember ? (\n          <div className=\"event-display-messages-text-entry\">\n            <form>\n              <input type=\"text\" placeholder=\"Message\" value={this.props.currentlyTypingMessage} onChange={this.props.currentlyTypingMessageChanged}/>\n              <div><button onClick={event => this.props.sendMessage(event, this.props.event_id)}>Send</button></div>\n            </form>\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Autocomplete from 'react-autocomplete'\nimport {index} from \"../utility.js\"\nimport VoteCount from './VoteCount.js';\nimport FlipMove from 'react-flip-move';\nimport Chatroom from './Chatroom.js';\n\nexport default class EventDisplay extends Component {\n  dropDownStyle = {\n    borderRadius: '3px',\n    boxShadow: '0 2px 12px rgba(0, 0, 0, 0.1)',\n    background: 'rgba(255, 255, 255, 0.9)',\n    padding: '2px 0',\n    fontSize: '90%',\n    position: 'fixed',\n    overflow: 'auto',\n    maxHeight: '50%',\n    \"z-index\": \"1\"\n  }\n  \n  render() {\n    const invitableUsersById = index(this.props.invitableUsers, \"id\")\n\n    let inviteAcceptedUsers = this.props.invites.filter(invite => invite.accepted)\n    // also display event owner as a member of event\n    inviteAcceptedUsers.push({user_id: this.props.data.created_by})\n    inviteAcceptedUsers = inviteAcceptedUsers.map(invite => invitableUsersById[invite.user_id])\n\n    const invitePendingUsers = this.props.invites.filter(invite => !invite.accepted).map(invite => invitableUsersById[invite.user_id])\n    const viewingAsMember = this.viewingAsMember(inviteAcceptedUsers)\n    const sortedPlaces = this.props.placeSuggestions.sort((place1, place2) => place2.votes.length - place1.votes.length)\n\n    const usersExcludingSelf = this.props.invitableUsers.filter(user => !this.props.loggedInAs || user.id !== this.props.loggedInAs.id)\n\n    const usersWhoVotedForMousedOver = (this.props.mousedOverSuggestion && this.props.mousedOverSuggestion.votes.map(vote => vote.user_id)) || []\n    return (\n      <div className=\"event-display\">\n        <div className=\"event-display-left-column\">\n          <div className=\"event-display-main\">\n            <div className=\"event-display-members\">\n              <div className=\"invited-users-list\">\n                <div>Users going:</div>\n                {inviteAcceptedUsers.map(user => <div key={user.id} className={usersWhoVotedForMousedOver.includes(user.id) ? \"voted-user\" : \"\"}>{user.name}</div> )}\n              </div>\n            </div>\n            <div className=\"event-display-title\">\n              <span className=\"event-name\">\n                {this.props.data.name}\n                {this.viewingAsCreator() ? <span className=\"delete-event-button\" onClick={() => this.props.removeEvent(this.props.data.id)}> (Delete)</span> : null}\n              </span>\n              <span className=\"event-date\">{new Date(this.props.data.event_date).toLocaleString()}</span>\n              {this.props.eventOwned ? (\n                <div className=\"invite-user-field\">\n                  <div className=\"invite-user-label\">Invite to Event</div>\n                  <Autocomplete\n                    getItemValue={(item) => item.name}\n                    items={usersExcludingSelf}\n                    renderItem={(item, isHighlighted) =>\n                      <div style={{\n                        background: isHighlighted ? 'lightgray' : 'white',\n                        color: this.props.invites.find(invite => invite.user_id === item.id) !== undefined ? '#67960f80' : 'black'\n                      }}>\n                        {item.name}\n                      </div>\n                    }\n                    value={this.props.invitingUserText}\n                    onChange={(event) => this.props.invitingUserTextChanged(event.target.value)}\n                    onSelect={(value, item) => this.props.inviteUser(item.id, this.props.data.id)}\n                    shouldItemRender={(user, input) => this.doesNameContainInput(user.name, input)}\n                    menuStyle={this.dropDownStyle}\n                  />\n                </div>\n              ) : null}\n            </div>\n            <div className=\"event-display-members\">\n              <div className=\"invited-users-list\">\n                <div>Users already invited:</div>\n                {invitePendingUsers.map(user => <div key={user.id}>{user.name}</div> )}\n              </div>\n              {this.props.loggedInAs && invitePendingUsers.find(invite => {\n                return invite.id === this.props.loggedInAs.id\n                }) !== undefined ? (\n                <div className=\"join-event\">\n                  <button className=\"join-event-button\" onClick={() => this.props.acceptInvitation(this.props.data.id)}>Join Event</button>\n                </div>\n              ) : null}\n            </div>\n          </div>\n          {viewingAsMember ? (\n            <div className=\"event-display-place-suggestion\">\n              <div className=\"invite-user-label\">Suggest a Place</div>\n              <Autocomplete\n                getItemValue={(item) => item.placeName}\n                items={this.props.placeSearchAutocompletes}\n                renderItem={(item, isHighlighted) =>\n                  <div style={{background: isHighlighted ? 'lightgray' : 'white'}}>\n                    {item.placeName}\n                  </div>\n                }\n                value={this.props.placeSearchText}\n                onChange={(event) => this.props.placeSearchTextChanged(event.target.value)}\n                onSelect={(value, item) => this.props.suggestPlace(item.placeID, item.placeName, this.props.data.id)}\n                shouldItemRender={(place, input) => this.doesNameContainInput(place.placeName, input)}\n                menuStyle={this.dropDownStyle}\n              />\n            </div>\n          ) : null}\n          <div className=\"event-display-place-list\">\n            <FlipMove>\n              {sortedPlaces.map(place => {\n                const votedFor = this.votedFor(place)\n                const entryClassName = \"event-display-place-list-entry\" + (votedFor ? \" voted-for\" : \"\")\n                const id = `${place.google_place_id}${this.props.data.id}`\n                return (\n                  <div className=\"event-display-place-list-entry-container\"\n                      key={id}\n                      onMouseOver={() => this.props.placeMousedOver({event_id: this.props.data.id, google_place_id: place.google_place_id})}\n                      onMouseOut={() => this.props.placeMousedOver(null)}>\n                    <VoteCount votes={place.votes.length} id={id}/>\n                    {viewingAsMember ? (\n                      <div className={`${entryClassName} clickable`}\n                          onClick={() => this.props.placeClickedOn(place.google_place_id, this.props.data.id, votedFor)}>\n                        {place.name} \n                      </div>\n                    ) : (\n                      <div className={`${entryClassName}`}>\n                        {place.name} \n                      </div>\n                    )}\n                  </div>\n                )\n              })}\n            </FlipMove>\n          </div>\n        </div>\n        <div className=\"event-display-right-column\">\n          <Chatroom\n            event_id={this.props.data.id}\n            messages={this.props.messages}\n            currentlyTypingMessage={this.props.currentlyTypingMessage}\n            currentlyTypingMessageChanged={this.props.currentlyTypingMessageChanged}\n            sendMessage={this.props.sendMessage}\n            users={index(inviteAcceptedUsers, \"id\")}\n            viewingAsMember={viewingAsMember}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  doesNameContainInput = (name, input) => {\n    return name.toLowerCase().indexOf(input.toLowerCase()) !== -1\n  }\n\n  viewingAsMember = (inviteAcceptedUsers) => {\n    return this.props.loggedInAs && (inviteAcceptedUsers.find(invite => \n      invite.id === this.props.loggedInAs.id\n    ) !== undefined)\n  }\n\n  votedFor = (place) => {\n    return this.props.loggedInAs && place.votes.find(place => place.user_id === this.props.loggedInAs.id) !== undefined\n  }\n\n  viewingAsCreator = () => {\n    return this.props.loggedInAs && this.props.loggedInAs.id === this.props.data.created_by\n  }\n}\n","import React, { Component } from 'react';\nimport EventDisplay from './EventDisplay';\nimport {group} from '../utility.js'\n\nexport default class EventsList extends Component {\n  render() {\n    const invitesByEvent = group(this.props.invites, \"event_id\")\n    const placeSuggestionsByEvent = group(this.props.placeSuggestions, \"event_id\")\n    const messagesByEvent = group(this.props.messages, \"event_id\")\n    const sortedEvents = this.props.events.sort((event1, event2) => new Date(event1.event_date).getTime() - new Date(event2.event_date).getTime())\n    return (\n      <div className=\"events-list\">\n        {sortedEvents.map(event => <EventDisplay data={event}\n                                                  key={event.id}\n                                                  invitableUsers={this.props.invitableUsers}\n                                                  invitingUserText={this.props.invitingUserText}\n                                                  invitingUserTextChanged={this.props.invitingUserTextChanged}\n                                                  inviteUser={this.props.inviteUser}\n                                                  invites={invitesByEvent[event.id] || []}\n                                                  loggedInAs={this.props.loggedInAs}\n                                                  eventOwned={this.props.loggedInAs && this.props.loggedInAs.id === event.created_by}\n                                                  acceptInvitation={this.props.acceptInvitation}\n                                                  placeSearchText={this.props.placeSearchText}\n                                                  placeSearchTextChanged={this.props.placeSearchTextChanged}\n                                                  placeSearchAutocompletes={this.props.placeSearchAutocompletes}\n                                                  suggestPlace={this.props.suggestPlace}\n                                                  placeSuggestions={placeSuggestionsByEvent[event.id] || []}\n                                                  placeClickedOn={this.props.placeClickedOn}\n                                                  placeMousedOver={this.props.placeMousedOver}\n                                                  mousedOverSuggestion={this.props.mousedOverSuggestionIDs && (placeSuggestionsByEvent[event.id] || []).find(suggestion =>\n                                                    suggestion.event_id === this.props.mousedOverSuggestionIDs.event_id &&\n                                                    suggestion.google_place_id === this.props.mousedOverSuggestionIDs.google_place_id\n                                                    )}\n                                                  removeEvent={this.props.removeEvent}\n                                                  messages={messagesByEvent[event.id] || []}\n                                                  currentlyTypingMessage={this.props.currentlyTypingMessage}\n                                                  currentlyTypingMessageChanged={this.props.currentlyTypingMessageChanged}\n                                                  sendMessage={this.props.sendMessage}\n                                                  />)}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class LoginArea extends Component {\n  render() {\n    return this.props.loggedInAs === null ? (\n      <div className=\"login-area\">\n        <form>\n          <input type=\"text\" placeholder=\"Username\" value={this.props.loginUsername} onChange={this.props.loginUsernameChanged}/>\n          <input type=\"password\" placeholder=\"Password\" value={this.props.loginPassword} onChange={this.props.loginPasswordChanged}/>\n          <div><button onClick={this.props.loginButtonPressed}>Login</button></div>\n        </form>\n        <form>\n          <input type=\"text\" placeholder=\"Username\" value={this.props.newUsername} onChange={this.props.newUsernameChanged}/>\n          <input type=\"password\" placeholder=\"Password\" value={this.props.newPassword} onChange={this.props.newPasswordChanged}/>\n          <div><button onClick={this.props.createNewUser}>Sign Up</button></div>\n        </form>\n      </div>\n    ) : (\n      <div className=\"login-area\">\n        <div className=\"logged-in-text\">Logged in as {this.props.loggedInAs}</div>\n        <div><button onClick={this.props.logoutButtonPressed}>Logout</button></div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport NewEventInput from './NewEventInput';\nimport EventsList from './EventsList';\nimport './styles.css';\nimport LoginArea from './LoginArea';\n\nexport default class MainView extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main-view\">\n          <div className=\"login-and-events-wrapper\">\n            <div className=\"login-wrapper\">\n              <LoginArea \n                loginUsername={this.props.loginUsername}\n                loginPassword={this.props.loginPassword}\n                loginUsernameChanged={this.props.loginUsernameChanged}\n                loginPasswordChanged={this.props.loginPasswordChanged}\n                loginButtonPressed={this.props.loginButtonPressed}\n\n                newUsername={this.props.newUsername}\n                newPassword={this.props.newPassword}\n                newUsernameChanged={this.props.newUsernameChanged}\n                newPasswordChanged={this.props.newPasswordChanged}\n                createNewUser={this.props.createNewUser}\n                \n                loggedInAs={this.props.loggedInAs ? this.props.loggedInAs.name : null}\n                logoutButtonPressed={this.props.logoutButtonPressed}\n              />\n            </div>\n            <div className=\"events-list-wrapper\">\n              <h2>Events!</h2>\n              {this.props.loggedInAs !== null ? <NewEventInput newEventName={this.props.newEventName}\n                            newEventDate={this.props.newEventDate}\n                            newEventNameChanged={this.props.newEventNameChanged}\n                            createNewEvent={this.props.createNewEvent}\n                            newEventDateChanged={this.props.newEventDateChanged}/> : null}\n              <EventsList events={this.props.events}\n                          invitableUsers={this.props.invitableUsers}\n                          invitingUserText={this.props.invitingUserText}\n                          invitingUserTextChanged={this.props.invitingUserTextChanged}\n                          inviteUser={this.props.inviteUser}\n                          invites={this.props.invites}\n                          loggedInAs={this.props.loggedInAs}\n                          acceptInvitation={this.props.acceptInvitation}\n                          placeSearchText={this.props.placeSearchText}\n                          placeSearchTextChanged={this.props.placeSearchTextChanged}\n                          placeSearchAutocompletes={this.props.placeSearchAutocompletes}\n                          suggestPlace={this.props.suggestPlace}\n                          placeSuggestions={this.props.placeSuggestions}\n                          placeClickedOn={this.props.placeClickedOn}\n                          placeMousedOver={this.props.placeMousedOver}\n                          mousedOverSuggestionIDs={this.props.mousedOverSuggestionIDs}\n                          removeEvent={this.props.removeEvent}\n                          messages={this.props.messages}\n                          currentlyTypingMessage={this.props.currentlyTypingMessage}\n                          currentlyTypingMessageChanged={this.props.currentlyTypingMessageChanged}\n                          sendMessage={this.props.sendMessage}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport MainView from './MainView';\nimport {today} from '../utility.js'\n\nexport default class SocketController extends Component {\n  state = {\n    events: [],\n    newEventName: \"\",\n    newEventDate: today(),\n    loginUsername: \"\",\n    loginPassword: \"\",\n    newUsername: \"\",\n    newPassword: \"\",\n    loggedInAs: null,\n    invitableUsers: [],\n    invitingUserText: \"\",\n    invites: [],\n    placeSearchText: \"\",\n    placeSearchAutocompletes: [],\n    placeSuggestions: [],\n    mousedOverSuggestionID: null,\n    messages: [],\n    currentlyTypingMessage: \"\"\n  }\n\n  componentDidMount = () => {\n    this.setupSocket()\n  }\n\n  setupSocket = () => {\n    // const url = \"http://localhost:3000\"\n    // const socket = require('socket.io-client')(url);\n    const socket = require('socket.io-client')();\n    this.socket = socket\n    socket.on(\"initialData\", this.setInitialData)\n    socket.on(\"eventList\", this.updateEventList)\n    socket.on(\"invitableUsersList\", this.updateInvitableUsersList)\n    socket.on(\"loggedIn\", this.loginSuccess)\n    socket.on(\"invitesList\", this.updateInvitesList)\n    socket.on(\"placeNameMatches\", this.setPlaceSearchAutocompletes)\n    socket.on(\"placeSuggestions\", this.updatePlaceSuggestions)\n    socket.on(\"messages\", this.updateMessages)\n  }\n\n  createNewEvent = () => {\n    this.socket.emit(\"createNewEvent\", {\n      token: this.state.loggedInAs.token,\n      name: this.state.newEventName,\n      user_id: this.state.loggedInAs.id,\n      date: this.state.newEventDate.getTime()\n    })\n    this.setState({newEventName: \"\", newEventDate: today()})\n  }\n\n  newEventNameChanged = (event) => {\n    this.setState({newEventName: event.target.value})\n  }\n\n  newEventDateChanged = (event) => {\n    this.setState({newEventDate: event})\n  }\n\n  updateEventList = (events) => {\n    this.setState({events: events})\n  }\n\n  updateInvitableUsersList = (users) => {\n    this.setState({invitableUsers: users})\n  }\n\n  updateInvitesList = (invites) => {\n    this.setState({invites: invites})\n  }\n\n  invitingUserTextChanged = (text) => {\n    this.setState({invitingUserText: text})\n  }\n\n  updatePlaceSuggestions = (placeSuggestions) => {\n    this.setState({placeSuggestions: placeSuggestions})\n  }\n\n  updateMessages = (messages) => {\n    this.setState({messages: messages})\n  }\n  \n  inviteUser = (userID, eventID) => {\n    this.socket.emit(\"inviteUserToEvent\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      invitee_user_id: userID,\n      event_id: eventID\n    })\n    this.setState({invitingUserText: \"\"})\n  }\n\n  setInitialData = ({events, users, invites, placeSuggestions, messages}) => {\n    this.setState({\n      events: events,\n      invitableUsers: users,\n      invites: invites,\n      placeSuggestions: placeSuggestions,\n      messages: messages\n    })\n  }\n\n  loginUsernameChanged = (event) => {\n    this.setState({loginUsername: event.target.value})\n  }\n\n  loginPasswordChanged = (event) => {\n    this.setState({loginPassword: event.target.value})\n  }\n\n  loginButtonPressed = (event) => {\n    event.preventDefault()\n    this.socket.emit(\"login\", {\n      username: this.state.loginUsername,\n      password: this.state.loginPassword\n    })\n    this.setState({newUsername: \"\", newPassword: \"\", loginUsername: \"\", loginPassword: \"\"})\n  }\n\n  newUsernameChanged = (event) => {\n    this.setState({newUsername: event.target.value})\n  }\n\n  newPasswordChanged = (event) => {\n    this.setState({newPassword: event.target.value})\n  }\n\n  createNewUser = (event) => {\n    event.preventDefault()\n    this.socket.emit(\"signUp\", {\n      username: this.state.newUsername,\n      password: this.state.newPassword\n    })\n    this.setState({newUsername: \"\", newPassword: \"\", loginUsername: \"\", loginPassword: \"\"})\n  }\n\n  loginSuccess = ({user}) => {\n    this.setState({loggedInAs: user})\n  }\n\n  logoutButtonPressed = () => {\n    this.setState({loggedInAs: null})\n  }\n\n  acceptInvitation = (event_id) => {\n    this.socket.emit(\"acceptInvitation\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      event_id: event_id\n    })\n  }\n\n  placeSearchTextChanged = (text) => {\n    const autoCompleteBuildupTime = 250 //ms\n\n    if (this.autoCompleteBuildupTimer !== null) {\n      clearTimeout(this.autoCompleteBuildupTimer)\n      this.autoCompleteBuildupTimer = null\n    }\n    if (text !== \"\") {\n      this.autoCompleteBuildupTimer = setTimeout(() => {\n        this.socket.emit(\"placeTextEntered\", {\n          token: this.state.loggedInAs.token,\n          user_id: this.state.loggedInAs.id,\n          text: text\n        })\n        this.autoCompleteBuildupTimer = null\n      }, autoCompleteBuildupTime)\n    } else {\n      this.setState({placeSearchAutocompletes: []})\n    }\n\n    this.setState({\n      placeSearchText: text\n    })\n  }\n\n  setPlaceSearchAutocompletes = (places) => {\n    this.setState({placeSearchAutocompletes: places})\n  }\n\n  suggestPlace = (placeID, placeName, eventID) => {\n    this.socket.emit(\"suggestPlace\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      place_id: placeID,\n      place_name: placeName,\n      event_id: eventID\n    })\n    this.setState({placeSearchText: \"\"})\n  }\n\n  placeClickedOn = (place_id, event_id, alreadyVoted) => {\n    this.socket.emit(\"voteForPlace\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      place_id: place_id,\n      event_id: event_id,\n      setVoteTo: !alreadyVoted\n    })\n  }\n\n  placeMousedOver = (suggestionIDs) => {\n    this.setState({mousedOverSuggestionIDs: suggestionIDs})\n  }\n\n  removeEvent = (event_id) => {\n    this.socket.emit(\"removeEvent\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      event_id: event_id\n    })\n  }\n\n  currentlyTypingMessageChanged = (event) => {\n    this.setState({currentlyTypingMessage: event.target.value})\n  }\n\n  sendMessage = (event, event_id) => {\n    event.preventDefault()\n    this.socket.emit(\"sendMessage\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      event_id: event_id,\n      message: this.state.currentlyTypingMessage\n    })\n    this.setState({currentlyTypingMessage: \"\"})\n  }\n\n  render() {\n    return <MainView events={this.state.events}\n                      newEventName={this.state.newEventName}\n                      newEventDate={this.state.newEventDate}\n                      createNewEvent={this.createNewEvent}\n                      newEventNameChanged={this.newEventNameChanged}\n                      newEventDateChanged={this.newEventDateChanged}\n\n                      loginUsername={this.state.loginUsername}\n                      loginPassword={this.state.loginPassword}\n                      loginUsernameChanged={this.loginUsernameChanged}\n                      loginPasswordChanged={this.loginPasswordChanged}\n                      loginButtonPressed={this.loginButtonPressed}\n                      newUsername={this.state.newUsername}\n                      newPassword={this.state.newPassword}\n                      newUsernameChanged={this.newUsernameChanged}\n                      newPasswordChanged={this.newPasswordChanged}\n                      createNewUser={this.createNewUser}\n                      loggedInAs={this.state.loggedInAs}\n                      logoutButtonPressed={this.logoutButtonPressed}\n\n                      invitableUsers={this.state.invitableUsers}\n                      invitingUserText={this.state.invitingUserText}\n                      invitingUserTextChanged={this.invitingUserTextChanged}\n                      inviteUser={this.inviteUser}\n                      invites={this.state.invites}\n                      acceptInvitation={this.acceptInvitation}\n                      placeSearchText={this.state.placeSearchText}\n                      placeSearchTextChanged={this.placeSearchTextChanged}\n                      placeSearchAutocompletes={this.state.placeSearchAutocompletes}\n                      suggestPlace={this.suggestPlace}\n                      placeSuggestions={this.state.placeSuggestions}\n                      placeClickedOn={this.placeClickedOn}\n                      placeMousedOver={this.placeMousedOver}\n                      mousedOverSuggestionIDs={this.state.mousedOverSuggestionIDs}\n                      removeEvent={this.removeEvent}\n                      messages={this.state.messages}\n                      currentlyTypingMessage={this.state.currentlyTypingMessage}\n                      currentlyTypingMessageChanged={this.currentlyTypingMessageChanged}\n                      sendMessage={this.sendMessage}\n                      />\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport SocketController from './components/SocketController';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SocketController/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}