{"version":3,"sources":["utility.js","components/NewEventInput.js","components/VoteCount.js","components/Chatroom.js","components/UserDisplay.js","components/EventDisplay.js","components/EventsList.js","components/LoginArea.js","components/MainView.js","components/SocketController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","today","date","Date","setHours","setMinutes","setSeconds","index","array","key","reduce","object","element","Object","group","Array","push","NewEventInput","react_default","a","createElement","type","placeholder","value","this","props","newEventName","onChange","newEventNameChanged","entry_default","newEventDateChanged","newEventDate","onClick","createNewEvent","Component","VoteCount","componentDidMount","_this","positiveAnimation","anime","targets","id","color","easing","direction","duration","background","negativeAnimation","componentDidUpdate","prevProps","votes","restart","className","Chatroom","scrollToBottom","messageList","refs","maxScrollTop","scrollHeight","clientHeight","eventID","autoplay","scrollTop","messages","length","_this2","ref","map","message","created_on","toLocaleTimeString","hour","minute","toLocaleString","users","user_id","name","message_body","viewingAsMember","currentlyTypingMessage","currentlyTypingMessageChanged","event","sendMessage","UserDisplay","votedOnMousedOver","online","EventDisplay","dropDownStyle","borderRadius","boxShadow","padding","fontSize","position","overflow","maxHeight","z-index","doesNameContainInput","input","toLowerCase","indexOf","inviteAcceptedUsers","loggedInAs","undefined","find","invite","votedFor","place","viewingAsCreator","data","created_by","invitableUsersById","invitableUsers","invites","filter","accepted","invitePendingUsers","sortedPlaces","placeSuggestions","sort","place1","place2","usersExcludingSelf","user","usersWhoVotedForMousedOver","mousedOverSuggestion","vote","UserDisplay_UserDisplay","includes","onlineUsers","removeEvent","event_date","eventOwned","Autocomplete_default","getItemValue","item","items","renderItem","isHighlighted","style","invitingUserText","invitingUserTextChanged","target","onSelect","inviteUser","shouldItemRender","menuStyle","acceptInvitation","placeName","placeSearchAutocompletes","placeSearchText","placeSearchTextChanged","suggestPlace","placeID","react_flip_move_es","entryClassName","concat","google_place_id","onMouseOver","placeMousedOver","event_id","onMouseOut","VoteCount_VoteCount","placeClickedOn","Chatroom_Chatroom","EventsList","invitesByEvent","placeSuggestionsByEvent","messagesByEvent","sortedEvents","events","event1","event2","getTime","EventDisplay_EventDisplay","mousedOverSuggestionIDs","suggestion","LoginArea","loginUsername","loginUsernameChanged","loginPassword","loginPasswordChanged","loginButtonPressed","newUsername","newUsernameChanged","newPassword","newPasswordChanged","createNewUser","logoutButtonPressed","MainView","LoginArea_LoginArea","NewEventInput_NewEventInput","EventsList_EventsList","SocketController","state","mousedOverSuggestionID","setupSocket","socket","require","on","setInitialData","updateEventList","updateInvitableUsersList","loginSuccess","updateInvitesList","setPlaceSearchAutocompletes","updatePlaceSuggestions","updateMessages","updateOnlineUsers","emit","token","setState","text","userID","invitee_user_id","_ref","onlineUserIDs","preventDefault","username","password","_ref2","autoCompleteBuildupTimer","clearTimeout","setTimeout","places","place_id","place_name","alreadyVoted","setVoteTo","suggestionIDs","MainView_MainView","App","SocketController_SocketController","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db5996a1.chunk.js","sourcesContent":["const today = () => {\n  const date = new Date()\n  date.setHours(0);\n  date.setMinutes(0);\n  date.setSeconds(0);\n  return date;\n}\n\nconst index = (array, key) => {\n  return array.reduce( (object, element) => {\n    object[element[key]] = element\n    return object\n    // eslint-disable-next-line\n  }, new Object)\n}\n\nconst group = (array, key) => {\n  return array.reduce( (object, element) => {\n    // eslint-disable-next-line\n    object[element[key]] = object[element[key]] || new Array\n    object[element[key]].push(element)\n    return object\n    // eslint-disable-next-line\n  }, new Object)\n}\n\nmodule.exports = {today, index, group}","import React, { Component } from 'react';\nimport DateTimePicker from 'react-datetime-picker';\n\nexport default class NewEventInput extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <input type=\"text\" placeholder=\"Event Name\" value={this.props.newEventName} onChange={this.props.newEventNameChanged}/>\n          <DateTimePicker onChange={this.props.newEventDateChanged} value={this.props.newEventDate}/>\n        </div>\n        <button onClick={this.props.createNewEvent}>Create New Event</button>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport anime from 'animejs'\n\nexport default class VoteCount extends Component {\n  componentDidMount = () => {\n    this.positiveAnimation = anime({\n      targets: '.vote-count.' + this.props.id,\n      color: \"#ffffff\",\n      easing: 'easeOutQuart',\n      direction: 'alternate',\n      duration: 350,\n      background: \"#00B258\"\n    });\n    this.negativeAnimation = anime({\n      targets: '.vote-count.' + this.props.id,\n      color: \"#ffffff\",\n      easing: 'easeOutQuart',\n      direction: 'alternate',\n      duration: 350,\n      background: \"#B30300\"\n    });\n  }\n  \n  componentDidUpdate = (prevProps) => {\n    if (prevProps.votes < this.props.votes) {\n      this.positiveAnimation.restart()\n    } else if (prevProps.votes > this.props.votes) {\n      this.negativeAnimation.restart()\n    }\n  }\n\n  render() {\n    return <div className={\"vote-count \" + this.props.id}>{this.props.votes}</div>\n  }\n}\n","import React, { Component } from 'react';\nimport anime from 'animejs'\n\nexport default class Chatroom extends Component {\n  componentDidUpdate(prevProps) {\n    if (prevProps.messages.length !== this.props.messages.length) {\n      this.scrollToBottom();\n    }\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  render() {\n    return (\n      <div className=\"event-display-messages\">\n        <div className=\"event-display-messages-header\">Chat</div>\n        <div className={\"event-display-messages-list event-id-\" + this.props.eventID} ref=\"messageList\">\n          {this.props.messages.map(message =>\n            <div className=\"event-display-messages-message-container\" key={message.id}>\n              <div className=\"event-display-messages-message-timestamp basic-timestamp\">{new Date(message.created_on).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>\n              <div className=\"event-display-messages-message-timestamp full-timestamp\">{new Date(message.created_on).toLocaleString()}</div>\n              <div className=\"event-display-messages-message\">\n                <div className=\"event-display-messages-message-username\">{this.props.users[message.user_id].name}: </div>\n                <div className=\"event-display-messages-message-text\">{message.message_body}</div>\n              </div>\n            </div>\n          )}\n        </div>\n        {this.props.viewingAsMember ? (\n          <div className=\"event-display-messages-text-entry\">\n            <form>\n              <input type=\"text\" placeholder=\"Message\" value={this.props.currentlyTypingMessage} onChange={this.props.currentlyTypingMessageChanged}/>\n              <div><button onClick={event => this.props.sendMessage(event, this.props.eventID)}>Send</button></div>\n            </form>\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n\n  scrollToBottom = () => {\n    const { messageList } = this.refs;\n    const scrollHeight = messageList.scrollHeight;\n    const height = messageList.clientHeight;\n    const maxScrollTop = scrollHeight - height;\n    anime({\n      targets: '.event-display-messages-list.event-id-' + this.props.eventID,\n      easing: 'easeOutQuart',\n      direction: 'normal',\n      duration: 350,\n      autoplay: false,\n      scrollTop: maxScrollTop > 0 ? maxScrollTop : 0\n    }).restart()\n  }\n}","import React, { Component } from 'react';\n\nexport default class UserDisplay extends Component {\n  render() {\n    return (\n      <div className=\"user-display\">\n        <span className={\"user-display-name\" + (this.props.votedOnMousedOver ? \" voted-user\" : \"\")}>{this.props.name}</span>\n        {this.props.online ? <div className=\"online-indicator\"></div> : null}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Autocomplete from 'react-autocomplete'\nimport {index} from \"../utility.js\"\nimport VoteCount from './VoteCount.js';\nimport FlipMove from 'react-flip-move';\nimport Chatroom from './Chatroom.js';\nimport UserDisplay from './UserDisplay.js';\n\nexport default class EventDisplay extends Component {\n  dropDownStyle = {\n    borderRadius: '3px',\n    boxShadow: '0 2px 12px rgba(0, 0, 0, 0.1)',\n    background: 'rgba(255, 255, 255, 0.9)',\n    padding: '2px 0',\n    fontSize: '90%',\n    position: 'fixed',\n    overflow: 'auto',\n    maxHeight: '50%',\n    \"z-index\": \"1\"\n  }\n  \n  render() {\n    const invitableUsersById = index(this.props.invitableUsers, \"id\")\n\n    let inviteAcceptedUsers = this.props.invites.filter(invite => invite.accepted)\n    // also display event owner as a member of event\n    inviteAcceptedUsers.push({user_id: this.props.data.created_by})\n    inviteAcceptedUsers = inviteAcceptedUsers.map(invite => invitableUsersById[invite.user_id])\n\n    const invitePendingUsers = this.props.invites.filter(invite => !invite.accepted).map(invite => invitableUsersById[invite.user_id])\n    const viewingAsMember = this.viewingAsMember(inviteAcceptedUsers)\n    const sortedPlaces = this.props.placeSuggestions.sort((place1, place2) => place2.votes.length - place1.votes.length)\n\n    const usersExcludingSelf = this.props.invitableUsers.filter(user => !this.props.loggedInAs || user.id !== this.props.loggedInAs.id)\n\n    const usersWhoVotedForMousedOver = (this.props.mousedOverSuggestion && this.props.mousedOverSuggestion.votes.map(vote => vote.user_id)) || []\n    return (\n      <div className=\"event-display\">\n        <div className=\"event-display-left-column\">\n          <div className=\"event-display-main\">\n            <div className=\"event-display-members\">\n              <div className=\"invited-users-list\">\n                <div>Users going:</div>\n                {inviteAcceptedUsers.map(user => <UserDisplay key={user.id} votedOnMousedOver={usersWhoVotedForMousedOver.includes(user.id)} name={user.name} online={this.props.onlineUsers.includes(user.id)}/> )}\n              </div>\n            </div>\n            <div className=\"event-display-title\">\n              <span className=\"event-name\">\n                {this.props.data.name}\n                {this.viewingAsCreator() ? <span className=\"delete-event-button\" onClick={() => this.props.removeEvent(this.props.data.id)}> (Delete)</span> : null}\n              </span>\n              <span className=\"event-date\">{new Date(this.props.data.event_date).toLocaleString()}</span>\n              {this.props.eventOwned ? (\n                <div className=\"invite-user-field\">\n                  <div className=\"invite-user-label\">Invite to Event</div>\n                  <Autocomplete\n                    getItemValue={(item) => item.name}\n                    items={usersExcludingSelf}\n                    renderItem={(item, isHighlighted) =>\n                      <div style={{\n                        background: isHighlighted ? 'lightgray' : 'white',\n                        color: this.props.invites.find(invite => invite.user_id === item.id) !== undefined ? '#67960f80' : 'black'\n                      }}>\n                        {item.name}\n                      </div>\n                    }\n                    value={this.props.invitingUserText}\n                    onChange={(event) => this.props.invitingUserTextChanged(event.target.value)}\n                    onSelect={(value, item) => this.props.inviteUser(item.id, this.props.data.id)}\n                    shouldItemRender={(user, input) => this.doesNameContainInput(user.name, input)}\n                    menuStyle={this.dropDownStyle}\n                  />\n                </div>\n              ) : null}\n            </div>\n            <div className=\"event-display-members\">\n              <div className=\"invited-users-list\">\n                <div>Users already invited:</div>\n                {invitePendingUsers.map(user => <div key={user.id}>{user.name}</div> )}\n              </div>\n              {this.props.loggedInAs && invitePendingUsers.find(invite => {\n                return invite.id === this.props.loggedInAs.id\n                }) !== undefined ? (\n                <div className=\"join-event\">\n                  <button className=\"join-event-button\" onClick={() => this.props.acceptInvitation(this.props.data.id)}>Join Event</button>\n                </div>\n              ) : null}\n            </div>\n          </div>\n          {viewingAsMember ? (\n            <div className=\"event-display-place-suggestion\">\n              <div className=\"invite-user-label\">Suggest a Place</div>\n              <Autocomplete\n                getItemValue={(item) => item.placeName}\n                items={this.props.placeSearchAutocompletes}\n                renderItem={(item, isHighlighted) =>\n                  <div style={{background: isHighlighted ? 'lightgray' : 'white'}}>\n                    {item.placeName}\n                  </div>\n                }\n                value={this.props.placeSearchText}\n                onChange={(event) => this.props.placeSearchTextChanged(event.target.value)}\n                onSelect={(value, item) => this.props.suggestPlace(item.placeID, item.placeName, this.props.data.id)}\n                shouldItemRender={(place, input) => this.doesNameContainInput(place.placeName, input)}\n                menuStyle={this.dropDownStyle}\n              />\n            </div>\n          ) : null}\n          <div className=\"event-display-place-list\">\n            <FlipMove>\n              {sortedPlaces.map(place => {\n                const votedFor = this.votedFor(place)\n                const entryClassName = \"event-display-place-list-entry\" + (votedFor ? \" voted-for\" : \"\")\n                const id = `${place.google_place_id}${this.props.data.id}`\n                return (\n                  <div className=\"event-display-place-list-entry-container\"\n                      key={id}\n                      onMouseOver={() => this.props.placeMousedOver({event_id: this.props.data.id, google_place_id: place.google_place_id})}\n                      onMouseOut={() => this.props.placeMousedOver(null)}>\n                    <VoteCount votes={place.votes.length} id={id}/>\n                    {viewingAsMember ? (\n                      <div className={`${entryClassName} clickable`}\n                          onClick={() => this.props.placeClickedOn(place.google_place_id, this.props.data.id, votedFor)}>\n                        {place.name} \n                      </div>\n                    ) : (\n                      <div className={`${entryClassName}`}>\n                        {place.name} \n                      </div>\n                    )}\n                  </div>\n                )\n              })}\n            </FlipMove>\n          </div>\n        </div>\n        <div className=\"event-display-right-column\">\n          <Chatroom\n            eventID={this.props.data.id}\n            messages={this.props.messages}\n            currentlyTypingMessage={this.props.currentlyTypingMessage}\n            currentlyTypingMessageChanged={this.props.currentlyTypingMessageChanged}\n            sendMessage={this.props.sendMessage}\n            users={index(inviteAcceptedUsers, \"id\")}\n            viewingAsMember={viewingAsMember}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  doesNameContainInput = (name, input) => {\n    return name.toLowerCase().indexOf(input.toLowerCase()) !== -1\n  }\n\n  viewingAsMember = (inviteAcceptedUsers) => {\n    return this.props.loggedInAs && (inviteAcceptedUsers.find(invite => \n      invite.id === this.props.loggedInAs.id\n    ) !== undefined)\n  }\n\n  votedFor = (place) => {\n    return this.props.loggedInAs && place.votes.find(place => place.user_id === this.props.loggedInAs.id) !== undefined\n  }\n\n  viewingAsCreator = () => {\n    return this.props.loggedInAs && this.props.loggedInAs.id === this.props.data.created_by\n  }\n}\n","import React, { Component } from 'react';\nimport EventDisplay from './EventDisplay';\nimport {group} from '../utility.js'\n\nexport default class EventsList extends Component {\n  render() {\n    const invitesByEvent = group(this.props.invites, \"event_id\")\n    const placeSuggestionsByEvent = group(this.props.placeSuggestions, \"event_id\")\n    const messagesByEvent = group(this.props.messages, \"event_id\")\n    const sortedEvents = this.props.events.sort((event1, event2) => new Date(event1.event_date).getTime() - new Date(event2.event_date).getTime())\n    return (\n      <div className=\"events-list\">\n        {sortedEvents.map(event => <EventDisplay data={event}\n                                                  key={event.id}\n                                                  invitableUsers={this.props.invitableUsers}\n                                                  invitingUserText={this.props.invitingUserText}\n                                                  invitingUserTextChanged={this.props.invitingUserTextChanged}\n                                                  inviteUser={this.props.inviteUser}\n                                                  invites={invitesByEvent[event.id] || []}\n                                                  loggedInAs={this.props.loggedInAs}\n                                                  eventOwned={this.props.loggedInAs && this.props.loggedInAs.id === event.created_by}\n                                                  acceptInvitation={this.props.acceptInvitation}\n                                                  placeSearchText={this.props.placeSearchText}\n                                                  placeSearchTextChanged={this.props.placeSearchTextChanged}\n                                                  placeSearchAutocompletes={this.props.placeSearchAutocompletes}\n                                                  suggestPlace={this.props.suggestPlace}\n                                                  placeSuggestions={placeSuggestionsByEvent[event.id] || []}\n                                                  placeClickedOn={this.props.placeClickedOn}\n                                                  placeMousedOver={this.props.placeMousedOver}\n                                                  mousedOverSuggestion={this.props.mousedOverSuggestionIDs && (placeSuggestionsByEvent[event.id] || []).find(suggestion =>\n                                                    suggestion.event_id === this.props.mousedOverSuggestionIDs.event_id &&\n                                                    suggestion.google_place_id === this.props.mousedOverSuggestionIDs.google_place_id\n                                                    )}\n                                                  removeEvent={this.props.removeEvent}\n                                                  messages={messagesByEvent[event.id] || []}\n                                                  currentlyTypingMessage={this.props.currentlyTypingMessage}\n                                                  currentlyTypingMessageChanged={this.props.currentlyTypingMessageChanged}\n                                                  sendMessage={this.props.sendMessage}\n                                                  onlineUsers={this.props.onlineUsers}\n                                                  />)}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class LoginArea extends Component {\n  render() {\n    return this.props.loggedInAs === null ? (\n      <div className=\"login-area\">\n        <form>\n          <input type=\"text\" placeholder=\"Username\" value={this.props.loginUsername} onChange={this.props.loginUsernameChanged}/>\n          <input type=\"password\" placeholder=\"Password\" value={this.props.loginPassword} onChange={this.props.loginPasswordChanged}/>\n          <div><button onClick={this.props.loginButtonPressed}>Login</button></div>\n        </form>\n        <form>\n          <input type=\"text\" placeholder=\"Username\" value={this.props.newUsername} onChange={this.props.newUsernameChanged}/>\n          <input type=\"password\" placeholder=\"Password\" value={this.props.newPassword} onChange={this.props.newPasswordChanged}/>\n          <div><button onClick={this.props.createNewUser}>Sign Up</button></div>\n        </form>\n      </div>\n    ) : (\n      <div className=\"login-area\">\n        <div className=\"logged-in-text\">Logged in as {this.props.loggedInAs}</div>\n        <div><button onClick={this.props.logoutButtonPressed}>Logout</button></div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport NewEventInput from './NewEventInput';\nimport EventsList from './EventsList';\nimport './styles.css';\nimport LoginArea from './LoginArea';\n\nexport default class MainView extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main-view\">\n          <div className=\"login-and-events-wrapper\">\n            <div className=\"login-wrapper\">\n              <LoginArea \n                loginUsername={this.props.loginUsername}\n                loginPassword={this.props.loginPassword}\n                loginUsernameChanged={this.props.loginUsernameChanged}\n                loginPasswordChanged={this.props.loginPasswordChanged}\n                loginButtonPressed={this.props.loginButtonPressed}\n\n                newUsername={this.props.newUsername}\n                newPassword={this.props.newPassword}\n                newUsernameChanged={this.props.newUsernameChanged}\n                newPasswordChanged={this.props.newPasswordChanged}\n                createNewUser={this.props.createNewUser}\n                \n                loggedInAs={this.props.loggedInAs ? this.props.loggedInAs.name : null}\n                logoutButtonPressed={this.props.logoutButtonPressed}\n              />\n            </div>\n            <div className=\"events-list-wrapper\">\n              <h2>Events!</h2>\n              {this.props.loggedInAs !== null ? <NewEventInput newEventName={this.props.newEventName}\n                            newEventDate={this.props.newEventDate}\n                            newEventNameChanged={this.props.newEventNameChanged}\n                            createNewEvent={this.props.createNewEvent}\n                            newEventDateChanged={this.props.newEventDateChanged}/> : null}\n              <EventsList events={this.props.events}\n                          invitableUsers={this.props.invitableUsers}\n                          invitingUserText={this.props.invitingUserText}\n                          invitingUserTextChanged={this.props.invitingUserTextChanged}\n                          inviteUser={this.props.inviteUser}\n                          invites={this.props.invites}\n                          loggedInAs={this.props.loggedInAs}\n                          acceptInvitation={this.props.acceptInvitation}\n                          placeSearchText={this.props.placeSearchText}\n                          placeSearchTextChanged={this.props.placeSearchTextChanged}\n                          placeSearchAutocompletes={this.props.placeSearchAutocompletes}\n                          suggestPlace={this.props.suggestPlace}\n                          placeSuggestions={this.props.placeSuggestions}\n                          placeClickedOn={this.props.placeClickedOn}\n                          placeMousedOver={this.props.placeMousedOver}\n                          mousedOverSuggestionIDs={this.props.mousedOverSuggestionIDs}\n                          removeEvent={this.props.removeEvent}\n                          messages={this.props.messages}\n                          currentlyTypingMessage={this.props.currentlyTypingMessage}\n                          currentlyTypingMessageChanged={this.props.currentlyTypingMessageChanged}\n                          sendMessage={this.props.sendMessage}\n                          onlineUsers={this.props.onlineUsers}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport MainView from './MainView';\nimport {today} from '../utility.js'\n\nexport default class SocketController extends Component {\n  state = {\n    events: [],\n    newEventName: \"\",\n    newEventDate: today(),\n    loginUsername: \"\",\n    loginPassword: \"\",\n    newUsername: \"\",\n    newPassword: \"\",\n    loggedInAs: null,\n    invitableUsers: [],\n    invitingUserText: \"\",\n    invites: [],\n    placeSearchText: \"\",\n    placeSearchAutocompletes: [],\n    placeSuggestions: [],\n    mousedOverSuggestionID: null,\n    messages: [],\n    currentlyTypingMessage: \"\",\n    onlineUsers: []\n  }\n\n  componentDidMount = () => {\n    this.setupSocket()\n  }\n\n  setupSocket = () => {\n    // const url = \"http://localhost:3000\"\n    // const socket = require('socket.io-client')(url);\n    const socket = require('socket.io-client')();\n    this.socket = socket\n    socket.on(\"initialData\", this.setInitialData)\n    socket.on(\"eventList\", this.updateEventList)\n    socket.on(\"invitableUsersList\", this.updateInvitableUsersList)\n    socket.on(\"loggedIn\", this.loginSuccess)\n    socket.on(\"invitesList\", this.updateInvitesList)\n    socket.on(\"placeNameMatches\", this.setPlaceSearchAutocompletes)\n    socket.on(\"placeSuggestions\", this.updatePlaceSuggestions)\n    socket.on(\"messages\", this.updateMessages)\n    socket.on(\"onlineUsers\", this.updateOnlineUsers)\n  }\n\n  createNewEvent = () => {\n    this.socket.emit(\"createNewEvent\", {\n      token: this.state.loggedInAs.token,\n      name: this.state.newEventName,\n      user_id: this.state.loggedInAs.id,\n      date: this.state.newEventDate.getTime()\n    })\n    this.setState({newEventName: \"\", newEventDate: today()})\n  }\n\n  newEventNameChanged = (event) => {\n    this.setState({newEventName: event.target.value})\n  }\n\n  newEventDateChanged = (event) => {\n    this.setState({newEventDate: event})\n  }\n\n  updateEventList = (events) => {\n    this.setState({events: events})\n  }\n\n  updateInvitableUsersList = (users) => {\n    this.setState({invitableUsers: users})\n  }\n\n  updateInvitesList = (invites) => {\n    this.setState({invites: invites})\n  }\n\n  invitingUserTextChanged = (text) => {\n    this.setState({invitingUserText: text})\n  }\n\n  updatePlaceSuggestions = (placeSuggestions) => {\n    this.setState({placeSuggestions: placeSuggestions})\n  }\n\n  updateMessages = (messages) => {\n    this.setState({messages: messages})\n  }\n  \n  updateOnlineUsers = (onlineUsers) => {\n    this.setState({onlineUsers: onlineUsers})\n  }\n  \n  inviteUser = (userID, eventID) => {\n    this.socket.emit(\"inviteUserToEvent\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      invitee_user_id: userID,\n      event_id: eventID\n    })\n    this.setState({invitingUserText: \"\"})\n  }\n\n  setInitialData = ({events, users, invites, placeSuggestions, messages, onlineUserIDs}) => {\n    this.setState({\n      events: events,\n      invitableUsers: users,\n      invites: invites,\n      placeSuggestions: placeSuggestions,\n      messages: messages,\n      onlineUsers: onlineUserIDs\n    })\n  }\n\n  loginUsernameChanged = (event) => {\n    this.setState({loginUsername: event.target.value})\n  }\n\n  loginPasswordChanged = (event) => {\n    this.setState({loginPassword: event.target.value})\n  }\n\n  loginButtonPressed = (event) => {\n    event.preventDefault()\n    this.socket.emit(\"login\", {\n      username: this.state.loginUsername,\n      password: this.state.loginPassword\n    })\n    this.setState({newUsername: \"\", newPassword: \"\", loginUsername: \"\", loginPassword: \"\"})\n  }\n\n  newUsernameChanged = (event) => {\n    this.setState({newUsername: event.target.value})\n  }\n\n  newPasswordChanged = (event) => {\n    this.setState({newPassword: event.target.value})\n  }\n\n  createNewUser = (event) => {\n    event.preventDefault()\n    this.socket.emit(\"signUp\", {\n      username: this.state.newUsername,\n      password: this.state.newPassword\n    })\n    this.setState({newUsername: \"\", newPassword: \"\", loginUsername: \"\", loginPassword: \"\"})\n  }\n\n  loginSuccess = ({user}) => {\n    this.setState({loggedInAs: user})\n  }\n\n  logoutButtonPressed = () => {\n    this.socket.emit(\"logout\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id\n    })\n    this.setState({loggedInAs: null})\n  }\n\n  acceptInvitation = (event_id) => {\n    this.socket.emit(\"acceptInvitation\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      event_id: event_id\n    })\n  }\n\n  placeSearchTextChanged = (text) => {\n    const autoCompleteBuildupTime = 250 //ms\n\n    if (this.autoCompleteBuildupTimer !== null) {\n      clearTimeout(this.autoCompleteBuildupTimer)\n      this.autoCompleteBuildupTimer = null\n    }\n    if (text !== \"\") {\n      this.autoCompleteBuildupTimer = setTimeout(() => {\n        this.socket.emit(\"placeTextEntered\", {\n          token: this.state.loggedInAs.token,\n          user_id: this.state.loggedInAs.id,\n          text: text\n        })\n        this.autoCompleteBuildupTimer = null\n      }, autoCompleteBuildupTime)\n    } else {\n      this.setState({placeSearchAutocompletes: []})\n    }\n\n    this.setState({\n      placeSearchText: text\n    })\n  }\n\n  setPlaceSearchAutocompletes = (places) => {\n    this.setState({placeSearchAutocompletes: places})\n  }\n\n  suggestPlace = (placeID, placeName, eventID) => {\n    this.socket.emit(\"suggestPlace\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      place_id: placeID,\n      place_name: placeName,\n      event_id: eventID\n    })\n    this.setState({placeSearchText: \"\"})\n  }\n\n  placeClickedOn = (place_id, event_id, alreadyVoted) => {\n    this.socket.emit(\"voteForPlace\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      place_id: place_id,\n      event_id: event_id,\n      setVoteTo: !alreadyVoted\n    })\n  }\n\n  placeMousedOver = (suggestionIDs) => {\n    this.setState({mousedOverSuggestionIDs: suggestionIDs})\n  }\n\n  removeEvent = (event_id) => {\n    this.socket.emit(\"removeEvent\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      event_id: event_id\n    })\n  }\n\n  currentlyTypingMessageChanged = (event) => {\n    this.setState({currentlyTypingMessage: event.target.value})\n  }\n\n  sendMessage = (event, event_id) => {\n    event.preventDefault()\n    this.socket.emit(\"sendMessage\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      event_id: event_id,\n      message: this.state.currentlyTypingMessage\n    })\n    this.setState({currentlyTypingMessage: \"\"})\n  }\n\n  render() {\n    return <MainView events={this.state.events}\n                      newEventName={this.state.newEventName}\n                      newEventDate={this.state.newEventDate}\n                      createNewEvent={this.createNewEvent}\n                      newEventNameChanged={this.newEventNameChanged}\n                      newEventDateChanged={this.newEventDateChanged}\n\n                      loginUsername={this.state.loginUsername}\n                      loginPassword={this.state.loginPassword}\n                      loginUsernameChanged={this.loginUsernameChanged}\n                      loginPasswordChanged={this.loginPasswordChanged}\n                      loginButtonPressed={this.loginButtonPressed}\n                      newUsername={this.state.newUsername}\n                      newPassword={this.state.newPassword}\n                      newUsernameChanged={this.newUsernameChanged}\n                      newPasswordChanged={this.newPasswordChanged}\n                      createNewUser={this.createNewUser}\n                      loggedInAs={this.state.loggedInAs}\n                      logoutButtonPressed={this.logoutButtonPressed}\n\n                      invitableUsers={this.state.invitableUsers}\n                      invitingUserText={this.state.invitingUserText}\n                      invitingUserTextChanged={this.invitingUserTextChanged}\n                      inviteUser={this.inviteUser}\n                      invites={this.state.invites}\n                      acceptInvitation={this.acceptInvitation}\n                      placeSearchText={this.state.placeSearchText}\n                      placeSearchTextChanged={this.placeSearchTextChanged}\n                      placeSearchAutocompletes={this.state.placeSearchAutocompletes}\n                      suggestPlace={this.suggestPlace}\n                      placeSuggestions={this.state.placeSuggestions}\n                      placeClickedOn={this.placeClickedOn}\n                      placeMousedOver={this.placeMousedOver}\n                      mousedOverSuggestionIDs={this.state.mousedOverSuggestionIDs}\n                      removeEvent={this.removeEvent}\n                      messages={this.state.messages}\n                      currentlyTypingMessage={this.state.currentlyTypingMessage}\n                      currentlyTypingMessageChanged={this.currentlyTypingMessageChanged}\n                      sendMessage={this.sendMessage}\n                      onlineUsers={this.state.onlineUsers}\n                      />\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport SocketController from './components/SocketController';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SocketController/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}