{"version":3,"sources":["utility.js","components/NewEventInput.js","components/VoteCount.js","components/EventDisplay.js","components/EventsList.js","components/LoginArea.js","components/MainView.js","components/SocketController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","today","date","Date","setHours","setMinutes","setSeconds","index","array","key","reduce","object","element","Object","group","Array","push","NewEventInput","react_default","a","createElement","type","placeholder","value","this","props","newEventName","onChange","newEventNameChanged","entry_default","newEventDateChanged","newEventDate","onClick","createNewEvent","Component","VoteCount","componentDidMount","_this","positiveAnimation","anime","targets","id","color","easing","direction","duration","background","negativeAnimation","componentDidUpdate","prevProps","votes","restart","className","EventDisplay","dropDownStyle","borderRadius","boxShadow","padding","fontSize","position","overflow","maxHeight","z-index","doesNameContainInput","name","input","toLowerCase","indexOf","viewingAsMember","inviteAcceptedUsers","loggedInAs","eventOwned","undefined","find","invite","votedFor","place","user_id","_this2","invitableUsersById","invitableUsers","invites","filter","accepted","map","invitePendingUsers","sortedPlaces","placeSuggestions","sort","place1","place2","length","usersExcludingSelf","user","data","event_date","toLocaleString","Autocomplete_default","getItemValue","item","items","renderItem","isHighlighted","style","invitingUserText","event","invitingUserTextChanged","target","onSelect","inviteUser","shouldItemRender","menuStyle","acceptInvitation","placeName","placeSearchAutocompletes","placeSearchText","placeSearchTextChanged","suggestPlace","placeID","react_flip_move_es","entryClassName","concat","google_place_id","VoteCount_VoteCount","placeClickedOn","EventsList","invitesByEvent","placeSuggestionsByEvent","sortedEvents","events","event1","event2","getTime","EventDisplay_EventDisplay","created_by","LoginArea","loginUsername","loginUsernameChanged","loginPassword","loginPasswordChanged","loginButtonPressed","newUsername","newUsernameChanged","newPassword","newPasswordChanged","createNewUser","logoutButtonPressed","MainView","LoginArea_LoginArea","NewEventInput_NewEventInput","EventsList_EventsList","SocketController","state","setupSocket","socket","require","on","setInitialData","updateEventList","updateInvitableUsersList","loginSuccess","updateInvitesList","setPlaceSearchAutocompletes","updatePlaceSuggestions","emit","token","setState","users","text","userID","eventID","event_id","_ref","preventDefault","username","password","_ref2","autoCompleteBuildupTimer","clearTimeout","setTimeout","places","place_id","place_name","alreadyVoted","setVoteTo","MainView_MainView","App","SocketController_SocketController","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19aa05f9.chunk.js","sourcesContent":["const today = () => {\n  const date = new Date()\n  date.setHours(0);\n  date.setMinutes(0);\n  date.setSeconds(0);\n  return date;\n}\n\nconst index = (array, key) => {\n  return array.reduce( (object, element) => {\n    object[element[key]] = element\n    return object\n    // eslint-disable-next-line\n  }, new Object)\n}\n\nconst group = (array, key) => {\n  return array.reduce( (object, element) => {\n    // eslint-disable-next-line\n    object[element[key]] = object[element[key]] || new Array\n    object[element[key]].push(element)\n    return object\n    // eslint-disable-next-line\n  }, new Object)\n}\n\nmodule.exports = {today, index, group}","import React, { Component } from 'react';\nimport DateTimePicker from 'react-datetime-picker';\n\nexport default class NewEventInput extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <input type=\"text\" placeholder=\"Event Name\" value={this.props.newEventName} onChange={this.props.newEventNameChanged}/>\n          <DateTimePicker onChange={this.props.newEventDateChanged} value={this.props.newEventDate}/>\n        </div>\n        <button onClick={this.props.createNewEvent}>Create New Event</button>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport anime from 'animejs'\n\nexport default class VoteCount extends Component {\n  componentDidMount = () => {\n    this.positiveAnimation = anime({\n      targets: '.vote-count.' + this.props.id,\n      color: \"#ffffff\",\n      easing: 'easeOutQuart',\n      direction: 'alternate',\n      duration: 350,\n      background: \"#00B258\"\n    });\n    this.negativeAnimation = anime({\n      targets: '.vote-count.' + this.props.id,\n      color: \"#ffffff\",\n      easing: 'easeOutQuart',\n      direction: 'alternate',\n      duration: 350,\n      background: \"#B30300\"\n    });\n  }\n  \n  componentDidUpdate = (prevProps) => {\n    if (prevProps.votes < this.props.votes) {\n      this.positiveAnimation.restart()\n    } else if (prevProps.votes > this.props.votes) {\n      this.negativeAnimation.restart()\n    }\n  }\n\n  render() {\n    return <div className={\"vote-count \" + this.props.id}>{this.props.votes}</div>\n  }\n}\n","import React, { Component } from 'react';\nimport Autocomplete from 'react-autocomplete'\nimport {index} from \"../utility.js\"\nimport VoteCount from './VoteCount.js';\nimport FlipMove from 'react-flip-move';\n\nexport default class EventDisplay extends Component {\n  dropDownStyle = {\n    borderRadius: '3px',\n    boxShadow: '0 2px 12px rgba(0, 0, 0, 0.1)',\n    background: 'rgba(255, 255, 255, 0.9)',\n    padding: '2px 0',\n    fontSize: '90%',\n    position: 'fixed',\n    overflow: 'auto',\n    maxHeight: '50%', // TODO: don't cheat, let it flow to the bottom\n    \"z-index\": \"1\"\n  }\n  \n  render() {\n    const invitableUsersById = index(this.props.invitableUsers, \"id\")\n\n    const inviteAcceptedUsers = this.props.invites.filter(invite => invite.accepted).map(invite => invitableUsersById[invite.user_id])\n    const invitePendingUsers = this.props.invites.filter(invite => !invite.accepted).map(invite => invitableUsersById[invite.user_id])\n    const viewingAsMember = this.viewingAsMember(inviteAcceptedUsers)\n    const sortedPlaces = this.props.placeSuggestions.sort((place1, place2) => place2.votes.length - place1.votes.length)\n\n    const usersExcludingSelf = this.props.invitableUsers.filter(user => !this.props.loggedInAs || user.id !== this.props.loggedInAs.id)\n    return (\n      <div className=\"event-display\">\n        <div className=\"event-display-main\">\n          <div className=\"event-display-members\">\n            <div className=\"invited-users-list\">\n              <div>Users going:</div>\n              {inviteAcceptedUsers.map(user => <div key={user.id}>{user.name}</div> )}\n            </div>\n          </div>\n          <div className=\"event-display-title\">\n            <span className=\"event-name\">{this.props.data.name}</span>\n            <span className=\"event-date\">{new Date(this.props.data.event_date).toLocaleString()}</span>\n            {this.props.eventOwned ? (\n              <div className=\"invite-user-field\">\n                <div className=\"invite-user-label\">Invite to Event</div>\n                <Autocomplete\n                  getItemValue={(item) => item.name}\n                  items={usersExcludingSelf}\n                  renderItem={(item, isHighlighted) =>\n                    <div style={{\n                      background: isHighlighted ? 'lightgray' : 'white',\n                      color: this.props.invites.find(invite => invite.user_id === item.id) !== undefined ? '#67960f80' : 'black'\n                    }}>\n                      {item.name}\n                    </div>\n                  }\n                  value={this.props.invitingUserText}\n                  onChange={(event) => this.props.invitingUserTextChanged(event.target.value)}\n                  onSelect={(value, item) => this.props.inviteUser(item.id, this.props.data.id)}\n                  shouldItemRender={(user, input) => this.doesNameContainInput(user.name, input)}\n                  menuStyle={this.dropDownStyle}\n                />\n              </div>\n            ) : null}\n          </div>\n          <div className=\"event-display-members\">\n            <div className=\"invited-users-list\">\n              <div>Users already invited:</div>\n              {invitePendingUsers.map(user => <div key={user.id}>{user.name}</div> )}\n            </div>\n            {this.props.loggedInAs && invitePendingUsers.find(invite => {\n              return invite.id === this.props.loggedInAs.id\n              }) !== undefined ? (\n              <div className=\"join-event\">\n                <button className=\"join-event-button\" onClick={() => this.props.acceptInvitation(this.props.data.id)}>Join Event</button>\n              </div>\n            ) : null}\n          </div>\n        </div>\n        {viewingAsMember ? (\n          <div className=\"event-display-place-suggestion\">\n            <div className=\"invite-user-label\">Suggest a Place</div>\n            <Autocomplete\n              getItemValue={(item) => item.placeName}\n              items={this.props.placeSearchAutocompletes}\n              renderItem={(item, isHighlighted) =>\n                <div style={{background: isHighlighted ? 'lightgray' : 'white'}}>\n                  {item.placeName}\n                </div>\n              }\n              value={this.props.placeSearchText}\n              onChange={(event) => this.props.placeSearchTextChanged(event.target.value)}\n              onSelect={(value, item) => this.props.suggestPlace(item.placeID, item.placeName, this.props.data.id)}\n              shouldItemRender={(place, input) => this.doesNameContainInput(place.placeName, input)}\n              menuStyle={this.dropDownStyle}\n            />\n          </div>\n        ) : null}\n        <div className=\"event-display-place-list\">\n          <FlipMove>\n            {sortedPlaces.map(place => {\n              const votedFor = this.votedFor(place)\n              const entryClassName = \"event-display-place-list-entry\" + (votedFor ? \" voted-for\" : \"\")\n              const id = `${place.google_place_id}${this.props.data.id}`\n              return (\n                <div className=\"event-display-place-list-entry-container\" key={id}>\n                  <VoteCount votes={place.votes.length} id={id}/>\n                  {viewingAsMember ? (\n                    <div className={`${entryClassName} clickable`}\n                        onClick={() => this.props.placeClickedOn(place.google_place_id, this.props.data.id, votedFor)}>\n                      {place.name} \n                    </div>\n                  ) : (\n                    <div className={`${entryClassName}`}>\n                      {place.name} \n                    </div>\n                  )}\n                </div>\n              )\n            })}\n          </FlipMove>\n        </div>\n      </div>\n    )\n  }\n\n  doesNameContainInput = (name, input) => {\n    return name.toLowerCase().indexOf(input.toLowerCase()) !== -1\n  }\n\n  viewingAsMember = (inviteAcceptedUsers) => {\n    return this.props.loggedInAs && (this.props.eventOwned || inviteAcceptedUsers.find(invite => {\n      return invite.id === this.props.loggedInAs.id\n    }) !== undefined)\n  }\n\n  votedFor = (place) => {\n    return this.props.loggedInAs && place.votes.find(place => place.user_id === this.props.loggedInAs.id) !== undefined\n  }\n}\n","import React, { Component } from 'react';\nimport EventDisplay from './EventDisplay';\nimport {group} from '../utility.js'\n\nexport default class EventsList extends Component {\n  render() {\n    const invitesByEvent = group(this.props.invites, \"event_id\")\n    const placeSuggestionsByEvent = group(this.props.placeSuggestions, \"event_id\")\n    const sortedEvents = this.props.events.sort((event1, event2) => new Date(event1.event_date).getTime() - new Date(event2.event_date).getTime())\n    return (\n      <div className=\"events-list\">\n        {sortedEvents.map(event => <EventDisplay data={event}\n                                                  key={event.id}\n                                                  invitableUsers={this.props.invitableUsers}\n                                                  invitingUserText={this.props.invitingUserText}\n                                                  invitingUserTextChanged={this.props.invitingUserTextChanged}\n                                                  inviteUser={this.props.inviteUser}\n                                                  invites={invitesByEvent[event.id] || []}\n                                                  loggedInAs={this.props.loggedInAs}\n                                                  eventOwned={this.props.loggedInAs && this.props.loggedInAs.id === event.created_by}\n                                                  acceptInvitation={this.props.acceptInvitation}\n                                                  placeSearchText={this.props.placeSearchText}\n                                                  placeSearchTextChanged={this.props.placeSearchTextChanged}\n                                                  placeSearchAutocompletes={this.props.placeSearchAutocompletes}\n                                                  suggestPlace={this.props.suggestPlace}\n                                                  placeSuggestions={placeSuggestionsByEvent[event.id] || []}\n                                                  placeClickedOn={this.props.placeClickedOn}\n                                                  />)}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class LoginArea extends Component {\n  render() {\n    return this.props.loggedInAs === null ? (\n      <div className=\"login-area\">\n        <form>\n          <input type=\"text\" placeholder=\"Username\" value={this.props.loginUsername} onChange={this.props.loginUsernameChanged}/>\n          <input type=\"password\" placeholder=\"Password\" value={this.props.loginPassword} onChange={this.props.loginPasswordChanged}/>\n          <div><button onClick={this.props.loginButtonPressed}>Login</button></div>\n        </form>\n        <form>\n          <input type=\"text\" placeholder=\"Username\" value={this.props.newUsername} onChange={this.props.newUsernameChanged}/>\n          <input type=\"password\" placeholder=\"Password\" value={this.props.newPassword} onChange={this.props.newPasswordChanged}/>\n          <div><button onClick={this.props.createNewUser}>Sign Up</button></div>\n        </form>\n      </div>\n    ) : (\n      <div className=\"login-area\">\n        <div className=\"logged-in-text\">Logged in as {this.props.loggedInAs}</div>\n        <div><button onClick={this.props.logoutButtonPressed}>Logout</button></div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport NewEventInput from './NewEventInput';\nimport EventsList from './EventsList';\nimport './styles.css';\nimport LoginArea from './LoginArea';\n\nexport default class MainView extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main-view\">\n          <div className=\"login-and-events-wrapper\">\n            <div className=\"login-wrapper\">\n              <LoginArea \n                loginUsername={this.props.loginUsername}\n                loginPassword={this.props.loginPassword}\n                loginUsernameChanged={this.props.loginUsernameChanged}\n                loginPasswordChanged={this.props.loginPasswordChanged}\n                loginButtonPressed={this.props.loginButtonPressed}\n\n                newUsername={this.props.newUsername}\n                newPassword={this.props.newPassword}\n                newUsernameChanged={this.props.newUsernameChanged}\n                newPasswordChanged={this.props.newPasswordChanged}\n                createNewUser={this.props.createNewUser}\n                \n                loggedInAs={this.props.loggedInAs ? this.props.loggedInAs.name : null}\n                logoutButtonPressed={this.props.logoutButtonPressed}\n              />\n            </div>\n            <div className=\"events-list-wrapper\">\n              <h2>Events!</h2>\n              {this.props.loggedInAs !== null ? <NewEventInput newEventName={this.props.newEventName}\n                            newEventDate={this.props.newEventDate}\n                            newEventNameChanged={this.props.newEventNameChanged}\n                            createNewEvent={this.props.createNewEvent}\n                            newEventDateChanged={this.props.newEventDateChanged}/> : null}\n              <EventsList events={this.props.events}\n                          invitableUsers={this.props.invitableUsers}\n                          invitingUserText={this.props.invitingUserText}\n                          invitingUserTextChanged={this.props.invitingUserTextChanged}\n                          inviteUser={this.props.inviteUser}\n                          invites={this.props.invites}\n                          loggedInAs={this.props.loggedInAs}\n                          acceptInvitation={this.props.acceptInvitation}\n                          placeSearchText={this.props.placeSearchText}\n                          placeSearchTextChanged={this.props.placeSearchTextChanged}\n                          placeSearchAutocompletes={this.props.placeSearchAutocompletes}\n                          suggestPlace={this.props.suggestPlace}\n                          placeSuggestions={this.props.placeSuggestions}\n                          placeClickedOn={this.props.placeClickedOn}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport MainView from './MainView';\nimport {today} from '../utility.js'\n\nexport default class SocketController extends Component {\n  state = {\n    events: [],\n    newEventName: \"\",\n    newEventDate: today(),\n    loginUsername: \"\",\n    loginPassword: \"\",\n    newUsername: \"\",\n    newPassword: \"\",\n    loggedInAs: null,\n    invitableUsers: [],\n    invitingUserText: \"\",\n    invites: [],\n    placeSearchText: \"\",\n    placeSearchAutocompletes: [],\n    placeSuggestions: []\n  }\n\n  componentDidMount = () => {\n    this.setupSocket()\n  }\n\n  setupSocket = () => {\n    const url = \"ws://35.185.127.48:3001\"\n    const socket = require('socket.io-client')(url);\n    this.socket = socket\n    socket.on(\"initialData\", this.setInitialData)\n    socket.on(\"eventList\", this.updateEventList)\n    socket.on(\"invitableUsersList\", this.updateInvitableUsersList)\n    socket.on(\"loggedIn\", this.loginSuccess)\n    socket.on(\"invitesList\", this.updateInvitesList)\n    socket.on(\"placeNameMatches\", this.setPlaceSearchAutocompletes)\n    socket.on(\"placeSuggestions\", this.updatePlaceSuggestions)\n  }\n\n  createNewEvent = () => {\n    this.socket.emit(\"createNewEvent\", {\n      token: this.state.loggedInAs.token,\n      name: this.state.newEventName,\n      user_id: this.state.loggedInAs.id,\n      date: this.state.newEventDate.getTime()\n    })\n    this.setState({newEventName: \"\", newEventDate: today()})\n  }\n\n  newEventNameChanged = (event) => {\n    this.setState({newEventName: event.target.value})\n  }\n\n  newEventDateChanged = (event) => {\n    this.setState({newEventDate: event})\n  }\n\n  updateEventList = (events) => {\n    this.setState({events: events})\n  }\n\n  updateInvitableUsersList = (users) => {\n    this.setState({invitableUsers: users})\n  }\n\n  updateInvitesList = (invites) => {\n    this.setState({invites: invites})\n  }\n\n  invitingUserTextChanged = (text) => {\n    this.setState({invitingUserText: text})\n  }\n\n  updatePlaceSuggestions = (placeSuggestions) => {\n    this.setState({placeSuggestions: placeSuggestions})\n  }\n  \n  inviteUser = (userID, eventID) => {\n    this.socket.emit(\"inviteUserToEvent\", {\n      token: this.state.loggedInAs.token,\n      user_id: userID,\n      event_id: eventID\n    })\n  }\n\n  setInitialData = ({events, users, invites, placeSuggestions}) => {\n    this.setState({\n      events: events,\n      invitableUsers: users,\n      invites: invites,\n      placeSuggestions: placeSuggestions\n    })\n  }\n\n  loginUsernameChanged = (event) => {\n    this.setState({loginUsername: event.target.value})\n  }\n\n  loginPasswordChanged = (event) => {\n    this.setState({loginPassword: event.target.value})\n  }\n\n  loginButtonPressed = (event) => {\n    event.preventDefault()\n    this.socket.emit(\"login\", {\n      username: this.state.loginUsername,\n      password: this.state.loginPassword\n    })\n    this.setState({newUsername: \"\", newPassword: \"\", loginUsername: \"\", loginPassword: \"\"})\n  }\n\n  newUsernameChanged = (event) => {\n    this.setState({newUsername: event.target.value})\n  }\n\n  newPasswordChanged = (event) => {\n    this.setState({newPassword: event.target.value})\n  }\n\n  createNewUser = (event) => {\n    event.preventDefault()\n    this.socket.emit(\"signUp\", {\n      username: this.state.newUsername,\n      password: this.state.newPassword\n    })\n    this.setState({newUsername: \"\", newPassword: \"\", loginUsername: \"\", loginPassword: \"\"})\n  }\n\n  loginSuccess = ({user}) => {\n    this.setState({loggedInAs: user})\n  }\n\n  logoutButtonPressed = () => {\n    this.setState({loggedInAs: null})\n  }\n\n  acceptInvitation = (event_id) => {\n    this.socket.emit(\"acceptInvitation\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      event_id: event_id\n    })\n  }\n\n  placeSearchTextChanged = (text) => {\n    const autoCompleteBuildupTime = 250 //ms\n\n    if (this.autoCompleteBuildupTimer !== null) {\n      clearTimeout(this.autoCompleteBuildupTimer)\n      this.autoCompleteBuildupTimer = null\n    }\n    if (text !== \"\") {\n      this.autoCompleteBuildupTimer = setTimeout(() => {\n        this.socket.emit(\"placeTextEntered\", {\n          token: this.state.loggedInAs.token,\n          text: text\n        })\n        this.autoCompleteBuildupTimer = null\n      }, autoCompleteBuildupTime)\n    } else {\n      this.setState({placeSearchAutocompletes: []})\n    }\n\n    this.setState({\n      placeSearchText: text\n    })\n  }\n\n  setPlaceSearchAutocompletes = (places) => {\n    this.setState({placeSearchAutocompletes: places})\n  }\n\n  suggestPlace = (placeID, placeName, eventID) => {\n    this.socket.emit(\"suggestPlace\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      place_id: placeID,\n      place_name: placeName,\n      event_id: eventID\n    })\n  }\n\n  placeClickedOn = (place_id, event_id, alreadyVoted) => {\n    this.socket.emit(\"voteForPlace\", {\n      token: this.state.loggedInAs.token,\n      user_id: this.state.loggedInAs.id,\n      place_id: place_id,\n      event_id: event_id,\n      setVoteTo: !alreadyVoted\n    })\n  }\n\n  render() {\n    return <MainView events={this.state.events}\n                      newEventName={this.state.newEventName}\n                      newEventDate={this.state.newEventDate}\n                      createNewEvent={this.createNewEvent}\n                      newEventNameChanged={this.newEventNameChanged}\n                      newEventDateChanged={this.newEventDateChanged}\n\n                      loginUsername={this.state.loginUsername}\n                      loginPassword={this.state.loginPassword}\n                      loginUsernameChanged={this.loginUsernameChanged}\n                      loginPasswordChanged={this.loginPasswordChanged}\n                      loginButtonPressed={this.loginButtonPressed}\n                      newUsername={this.state.newUsername}\n                      newPassword={this.state.newPassword}\n                      newUsernameChanged={this.newUsernameChanged}\n                      newPasswordChanged={this.newPasswordChanged}\n                      createNewUser={this.createNewUser}\n                      loggedInAs={this.state.loggedInAs}\n                      logoutButtonPressed={this.logoutButtonPressed}\n\n                      invitableUsers={this.state.invitableUsers}\n                      invitingUserText={this.state.invitingUserText}\n                      invitingUserTextChanged={this.invitingUserTextChanged}\n                      inviteUser={this.inviteUser}\n                      invites={this.state.invites}\n                      acceptInvitation={this.acceptInvitation}\n                      placeSearchText={this.state.placeSearchText}\n                      placeSearchTextChanged={this.placeSearchTextChanged}\n                      placeSearchAutocompletes={this.state.placeSearchAutocompletes}\n                      suggestPlace={this.suggestPlace}\n                      placeSuggestions={this.state.placeSuggestions}\n                      placeClickedOn={this.placeClickedOn}\n                      />\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport SocketController from './components/SocketController';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SocketController/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}